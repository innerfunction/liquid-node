// Generated by CoffeeScript 1.10.0
(function() {
  var Assign, Liquid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Liquid = require("../../liquid");

  module.exports = Assign = (function(superClass) {
    var Syntax, SyntaxHelp;

    extend(Assign, superClass);

    SyntaxHelp = "Syntax Error in 'assign' - Valid syntax: assign [var] = [source]";

    Syntax = RegExp("((?:" + Liquid.VariableSignature.source + ")+)\\s*=\\s*(.*)\\s*");

    function Assign(template, tagName, markup) {
      var match;
      if (match = Syntax.exec(markup)) {
        this.to = match[1];
        this.from = new Liquid.Variable(match[2]);
        // The assignment is circular if the assign expression contains a reference
        // to the variable being assigned to
        this.circular = this.from.name == this.to;
        this.circular = this.circular || this.from.filters.some( f => {
            return f[1].some( a => a == this.to );
        });
      } else {
        throw new Liquid.SyntaxError(SyntaxHelp);
      }
      Assign.__super__.constructor.apply(this, arguments);
    }

      /*
    Assign.prototype.render = function(context) {
      context.lastScope()[this.to] = this.from.render(context);
      return Assign.__super__.render.call(this, context);
    };
    */
    Assign.prototype.render = function(context) {
        /*
        // Assignments to a var from the same var (e.g. x = x + 1) can result
        // in pending promise values which don't resolve. Detect these types
        // of assigments and delay assigning the value until it's been calculated.
        if( this.from.name != this.to ) {
            context.lastScope()[this.to] = this.from.render(context);
        }
        else {
            this.from.render(context).then( v => {
                context.lastScope()[this.to] = v;
            });
        }
        */

      // Isolate the assignment expression scope if the assignment is circular, i.e.
      // the RHS contains reference(s) to the LHS.
      if( this.circular ) {
        let lastScope = context.lastScope();
        // Create a scope for evaluating the assign expression; this contains the
        // pre-expression value of the assigned variable, and ensures that references
        // to the assigned variable from the expression won't hang.
        let exprScope = { [this.to]: lastScope[this.to] };
        // Render the expression and assign to the variable in the scope. The
        // expression is evaluated with an extended context local to the expression
        // containing the variable value before the assignment.
        lastScope[this.to] = this.from.render( context.extend( exprScope ) );
      }
      else {
        context.lastScope()[this.to] = this.from.render(context);
      }
      return Assign.__super__.render.call(this, context);
    };
      

    return Assign;

  })(Liquid.Tag);

}).call(this);

//# sourceMappingURL=assign.js.map
